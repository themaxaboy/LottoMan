'use strict';

const line = require('@line/bot-sdk');
const express = require('express');

const Price = require('./price');

// create LINE SDK config from env variables
const config = {
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.CHANNEL_SECRET,
};

// create LINE SDK client
const client = new line.Client(config);

// create Express app
// about Express itself: https://expressjs.com/
const app = express();

function startLineApp() {
    //register a webhook handler with middleware
    //about the middleware, please refer to doc
    app.post('/webhook', line.middleware(config), (req, res) => {
        Promise
            .all(req.body.events.map(handleEvent))
            .then((result) => res.json(result));
    });

    // app.get('/test', (req, res) => {
    //     res.send(JSON.stringify(price.getPrice()));
    // })

    // app.get('/check', (req, res) => {
    //     var input = req.query.data;
    //     var out = price.checkPrice(input);
    //     console.log(out);
    //     // res.set('Content-Type', 'text/html');
    //     res.send(out);
    // })

    //listen on port
    const port = process.env.PORT || 3000;
    app.listen(port, () => {
        console.log(`listening on ${port}`);
    });
}

// initial data
var price = new Price();
price.loadPrice(startLineApp);

// load data every 1 hour
setInterval(function () {
    price.loadPrice(startLineApp);
    console.log("Loop load date.");
}, 3600000);

// event handler
function handleEvent(event) {
    var messengToUser = '';
    var reg = new RegExp("\\d{6}");
    var reg2to3 = new RegExp("\\d{2,3}");

    if (event.type !== 'message' || event.message.type !== 'text') {
        // ignore non-text-message event
        return Promise.resolve(null);
    }
    if (event.message.type == 'text' && event.message.text == '?') {
        messengToUser = `üìë ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô üí¨
        ‚ùå ‡∏™‡πà‡∏á‡πÄ‡∏•‡∏Ç 6 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
        ‚≠ï ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏´‡∏ß‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        ‚ùå ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏Ç‡∏≠ 2","‡∏Ç‡∏≠ 3" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å LottoMan
        ‚≠ï ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "[‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏£‡∏∑‡∏≠ 3 ‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢]?" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡πá‡∏î‡πÉ‡∏´‡∏°`;
    } else if (event.message.type == 'text' && event.message.text.includes('?') && event.message.text.length < 5) {
        var num2to3 = reg2to3.exec(event.message.text) + '';
        var currentDate = new Date();
        var total = parseInt(num2to3) + parseInt(currentDate.getMonth());
        if (total % 2) {
            messengToUser = num2to3 + ' ‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡πá‡∏î‡∏°‡∏≤‡∏Å üëç';
        } else {
            messengToUser = num2to3 + ' ‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡πÄ‡∏î‡πá‡∏î‡πÄ‡∏•‡∏¢ üëé';
        }
    } else if (event.message.type == 'text' && event.message.text == '‡∏´‡∏ß‡∏¢') {
        var allPrice = price.getPrice();
        messengToUser += 'üìÜ ' + allPrice.date.replace('‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏ß‡∏¢', '‡∏á‡∏ß‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà') + '\n\n';
        messengToUser += 'üèÜ ' + allPrice['price1'].name + ' : ' + allPrice['price1'].data + '\n';
        messengToUser += 'üéñ ' + allPrice['pricel2'].name + ' : ' + allPrice['pricel2'].data + '\n';
        messengToUser += 'üí∏ ' + allPrice['pricef3'].name + ' : ' + allPrice['pricef3'].data.toString() + '\n';
        messengToUser += 'üí∏ ' + allPrice['pricel3'].name + ' : ' + allPrice['pricel3'].data.toString() + '\n';
        messengToUser += 'üéÜ ' + allPrice['pricen1'].name.replace('‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1', '') + ' : ' + allPrice['pricen1'].data.toString();
    } else if (event.message.type == 'text' && reg.test(event.message.text)) {
        var data = price.checkPrice(reg.exec(event.message.text) + '');
        for (var i in data) {
            messengToUser += 'üí≤ ' + data[i].text;
        }
        messengToUser = messengToUser.trim();
        if (!messengToUser.includes('false')) {
            messengToUser = 'üèÜ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• üåü\n\n' + messengToUser;
        } else {
            messengToUser = 'üò≠ ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• üíî'
        }
        messengToUser += '\n\n' + 'üìÜ ' + data[i].date;
    } else if (event.message.type == 'text' && (event.message.text.includes('‡∏Ç‡∏≠ 2') || event.message.text.includes('‡∏Ç‡∏≠ 3'))) {
        if (event.message.text.includes('2')) {
            messengToUser = '2Ô∏è‚É£ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ ' + Math.floor((Math.random() * 100) + 1) + ' ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ üôã‚Äç‚ôÇÔ∏è';
        } else {
            messengToUser = '3Ô∏è‚É£ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ ' + Math.floor((Math.random() * 1000) + 1) + ' ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ üôã';
        }
    } else {
        messengToUser = 'üéÅ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏•‡∏Ç 6 ‡∏´‡∏•‡∏±‡∏Å , ‡∏™‡πà‡∏á "‡∏´‡∏ß‡∏¢" ‡∏´‡∏£‡∏∑‡∏≠ "?" üñº'
    }

    // create a messeng to user text message
    const packMessage = {
        type: 'text',
        text: messengToUser
    };
    // use reply API
    return client.replyMessage(event.replyToken, packMessage);
}